// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   //user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

model Customer {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String     @unique
  favorites Favorite[]
  reviews   Review[] // Add relation field to reference multiple reviews

  Cart Cart[]

  Order Order[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  price       Float
  discount    Int
  description String   @db.Text // Increase length to accept longer text
  image       String   @db.VarChar(2048) // Increase length to accept longer URLs
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  supplierId  Int
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  rating      Int        @default(0) // Add rating field with default value
  favorites   Favorite[]
  reviews     Review[] // Add relation field to reference multiple reviews

  Cart Cart[]

  OrderItem OrderItem[]
}

model Supplier {
  id       Int       @id @default(autoincrement())
  type     String
  name     String
  email    String
  phone    String
  password String
  address  String
  city     String
  image    String? @db.VarChar(2048) // Increase length to accept longer URLs
  products Product[] // Relation field to reference multiple products
}

model Favorite {
  id         Int      @id @default(autoincrement())
  customerId Int
  productId  Int
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
}

model OtpVerifcations {
  id         Int      @id @default(autoincrement())
  otp        String
  customerId Int
  createdAt  DateTime @default(now()) // Add createdAt field with default value as current timestamp
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  productId  Int
  customerId Int
  product    Product  @relation(fields: [productId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
}

model Cart {
  id         Int      @id @default(autoincrement())
  customerId Int
  productId  Int
  quantity   Int      @default(1)
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  items      OrderItem[]
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

